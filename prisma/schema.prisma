// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([userId, provider]) 
    @@unique([provider, providerAccountId])
}

model User {
    id            String    @id @default(cuid())
    email         String    @unique
    name          String    
    emailVerified DateTime?
    image         String?
    imageKey      String? 
    accounts      Account[]
    companies     CompanyMember[]
}

// Prevent linking OAuth accounts to the user table
model UserCredential {
    id            String    @id @default(cuid())
    email         String    @unique
    password      String
    name          String    
    image         String?
    imageKey      String? 
    companies     CompanyMember[]
}

model Company {
  id          String         @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  departments Department[]   @default([FINANCE,INVENTORY,SALES,PURCHASING])
  memberships CompanyMember[]
}

model CompanyMember {
  id                  String          @id @default(cuid())
  userId              String?
  userCredentialId    String?
  companyId           String
  role                Role            @default(MEMBER)
  joinedAt            DateTime        @default(now())
  permissions         CompanyPermission[]
  user                User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userCredential    UserCredential?   @relation(fields: [userCredentialId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@unique([userId, companyId]) 
}

model CompanyPermission {
  id              String        @id @default(cuid())
  memberId        String
  department      Department
  permission      Permission
  member          CompanyMember @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@unique([memberId, department])
}

enum Role {
  OWNER
  MEMBER
}

enum Permission {
  READ
  EDIT
  NONE
}

enum Department {
  FINANCE
  INVENTORY
  SALES
  PURCHASING
}